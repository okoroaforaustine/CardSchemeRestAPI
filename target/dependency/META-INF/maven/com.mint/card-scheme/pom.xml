<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.mint</groupId>
    <artifactId>card-scheme</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>card-scheme</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <!--set this to your docker acct name-->
		
        <docker.image.prefix>austine234</docker.image.prefix>

        <!--Set to name of project-->
        <docker.image.name>cardscheme</docker.image.name>
      
    </properties>

    <dependencies>
            
      
      
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
                
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>3.4.1</version>
        </dependency>
                  
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-core</artifactId>
            <version>2.9.2</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        
        
        <dependency>
            <groupId>com.opencsv</groupId>
            <artifactId>opencsv</artifactId>
            <version>4.5</version>
        </dependency>
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.3.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
       
            <plugin>   
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
              

                <configuration>

                    <!-- <dockerHost>http://127.0.0.1:2375</dockerHost>-->
                    <dockerHost>unix:///var/run/docker.sock</dockerHost>
                     
                   
                    
                    <images>
                        <image>
                            <name>${docker.image.prefix}/${docker.image.name}</name>
                            <build>
                                <dockerFileDir>${project.basedir}/Dockerfile</dockerFileDir>
                            </build>
                         
                        </image>
                        <!--mysql container-->
                        <image>
                            <name>mysql</name>
                            <alias>mysqldb</alias>
                            <run>
                                <!--expose port for dn-->
                                <ports>
                                    <port>3306:3306</port>
                                </ports>
                                <!--set env prams for mysql image-->
                                <env>
                                    <MYSQL_DATABASE>cardschemedb</MYSQL_DATABASE>
                                    <MYSQL_USER>root</MYSQL_USER>
                                    <MYSQL_PASSWORD>password</MYSQL_PASSWORD>
                                 
                                </env>
                                <!--wait for db to start-->
                                <wait>
                                    <time>10000</time>
                                </wait>
                            </run>
                        </image>
                        <!--zookeeper container-->
                        <image>
                            <name>wurstmeister/zookeeper:latest</name>
                            <alias>zookeeper</alias>
                            <run>
                                <ports>
                                    <port>2181:2181</port>
                                </ports>
                            </run>
                        </image>
                        
                        <!--kafka container-->
                        <image>
                            <name>wurstmeister/kafka:1.0.0</name>
                            <alias>kafka</alias>
                            <run>
                                <ports>
                                    <port>9092:9092</port>
                                </ports>
                                <links>
                                    <link>zookeeper:zookeeper</link>
                                </links>
                                <env>
                                    <KAFKA_ADVERTISED_HOST_NAME>127.0.0.1</KAFKA_ADVERTISED_HOST_NAME>
                                    <KAFKA_ZOOKEEPER_CONNECT>zookeeper:2181</KAFKA_ZOOKEEPER_CONNECT>
                                </env>
                            </run>
                        </image>
                     
                     
                     
                     
                     
                     
                     
                        <!--docker run &#45;&#45;name pageviewservice -p 8081:8081 &#45;&#45;link rabbitmq:rabbitmq &#45;&#45;link mysqldb:mysqldb-->
                        <!-- -e SPRING_DATASOURCE_URL=jdbc:mysql://mysqldb:3306/pageviewservice -e SPRING_PROFILES_ACTIVE=mysql-->
                        <!-- -e SPRING_RABBITMQ_HOST=rabbitmq springframeworkguru/pageviewservice-->
                     
                    </images>
                </configuration>
            </plugin>
            
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <phase>package</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>  
        </plugins>
    </build>

</project>
